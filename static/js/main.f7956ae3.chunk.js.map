{"version":3,"sources":["components/main/mainImg/citrus1.png","components/main/videoplayback.mp4","components/main/videoplayback.webm","components/background/background.js","components/headerComponent/header.js","components/main/mainContent.js","components/dates/dateList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Background","Component","Header","className","to","MainContent","handleWindowSizeChange","setState","width","window","innerWidth","state","addEventListener","this","removeEventListener","src","mobileBackgroundImage","playsinline","autoPlay","muted","loop","style","position","marginleft","marginright","height","left","top","bgVideoWeb","type","bgVideoMp4","DateList","App","href","rel","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,mBCA3CD,EAAOC,QAAU,IAA0B,4C,6SCuB5BC,G,uLARP,OAEF,kC,GAJmBC,cCwBVC,G,6LArBP,OACI,yBAAKC,UAAU,eACX,gCACI,+CAGR,6BAEY,kBAAC,IAAD,CAAMC,GAAG,SAASD,UAAU,QAA5B,SACI,mC,GAXPF,c,kCC+FNI,E,YArFf,aAAe,IAAD,8BACZ,+CAgBFC,uBAAyB,WACvB,EAAKC,SAAS,CAAEC,MAAOC,OAAOC,cAhB9B,EAAKC,MAAQ,CACXH,MAAOC,OAAOC,YAHJ,E,kFAQZD,OAAOG,iBAAiB,SAAUC,KAAKP,0B,6CAMvCG,OAAOK,oBAAoB,SAAUD,KAAKP,0B,+BAapC,OAJUO,KAAKF,MAAfH,OACoB,IAQhB,yBAAKL,UAAY,qBAEjB,yBAAKY,IAAMC,MAGX,kBAAC,EAAD,OASI,8BACJ,yBAAKb,UAAW,eAChB,2BACAc,aAAW,EAACC,UAAQ,EAACC,OAAK,EAACC,MAAI,EAACC,MAC5B,CACIC,SAAU,QACVC,WAAY,OACZC,YAAa,OACbC,OAAQ,OACRC,KAAM,EACNC,IAAK,IAIb,4BAAQZ,IACJa,IACFC,KAAO,eAET,4BAAQd,IACJe,IACFD,KAAO,cAlBT,2CAwBI,kBAAC,EAAD,Y,GA3EU5B,aCQX8B,E,iLAlBP,OAII,6BAGA,4BACA,sDACA,+CACA,gDAEA,kBAAC,IAAD,CAAM3B,GAAG,IAAID,UAAU,QAAvB,U,GAdWF,aC6CR+B,E,iLA/BX,OAEI,kBAAC,IAAD,KAGC,0BAAMC,KAAK,wEAAwEC,IAAI,eAG5F,yBAAK/B,UAAU,OAQX,kBAAC,IAAD,CAAOgC,OAAK,EAACC,KAAM,IAAIC,UAAWhC,IAElC,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAM,SAASC,UAAWN,IAEvC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAM,SAASC,UAAWrC,U,GAtB7BC,aCTEqC,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f7956ae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/citrus1.54b8adad.png\";","module.exports = __webpack_public_path__ + \"static/media/videoplayback.ed1e44b9.mp4\";","module.exports = __webpack_public_path__ + \"static/media/videoplayback.00b3781f.webm\";","import React, { Component } from 'react';\n\nimport './backgroundStyle.css';\n\n\nimport {\n    Link\n}from 'react-router-dom';\n\n\n\n\n\nclass Background extends Component {\n    render() {\n        return(\n       \n      <div></div>\n    \n        );\n    }\n}\n\nexport default Background;\n","import React, { Component } from 'react';\n\nimport './headerStyle.css';\n\n\n\n\nimport {\n    Link\n}from 'react-router-dom';\n\n\n\n\nclass Header extends Component {\n    render() {\n        return(\n            <div className=\"headerStyle\">\n                <header>\n                    <h1>\n                    RAGNA LEMONTREE \n                    </h1>\n            <br/>\n                    \n                        <Link to='/dates' className=\"link\">Daten</Link>\n                            <br/>\n\n                    \n\n\n\n                </header>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n\n\n","import React, {\n    Component\n} from 'react';\n\nimport './mainContent.css';\n\nimport {\n    Link\n} from 'react-router-dom';\n\nimport Header from '../headerComponent/header.js';\n\n\nimport Background from '../background/background.js';\nimport mobileBackgroundImage from './mainImg/citrus1.png';\nimport bgVideoMp4 from './videoplayback.mp4';\nimport bgVideoWeb from './videoplayback.webm'\n\n\n\n\nclass MainContent extends Component {\n\n\nconstructor() {\n  super();\n  this.state = {\n    width: window.innerWidth,\n  };\n}\n    \n    componentWillMount() {\n  window.addEventListener('resize', this.handleWindowSizeChange);\n}\n    \n    // make sure to remove the listener\n// when the component is not mounted anymore\ncomponentWillUnmount() {\n  window.removeEventListener('resize', this.handleWindowSizeChange);\n}\n\nhandleWindowSizeChange = () => {\n  this.setState({ width: window.innerWidth });\n};\n\n\n    render() {\nconst { width } = this.state;\n  const isMobile = width <= 900;\n\n        \n        if (isMobile){\n        return (\n\n\n\n            <div className = \"mainContentMobile\" >\n\n            <img src= {mobileBackgroundImage}/>\n\n\n            <Header / >\n\n\n\n\n            </div>\n        );}\n        else{\n            return(\n                <body>\n            <div className =\"mainContent\">\n            <video  \n            playsinline autoPlay muted loop style = {\n                {\n                    position: \"fixed\",\n                    marginleft: \"auto\",\n                    marginright: \"auto\",\n                    height: \"100%\",\n                    left: 0,\n                    top: 0\n                }\n            } >\n\n            <source src = {\n                bgVideoWeb\n            } type = \"video/webm\" />\n                \n            <source src = {\n                bgVideoMp4\n            } type = \"video/mp4\" / >\n           \n            Your Browser does not Support the Video \n                \n                </video>\n                \n                <Header/>\n                \n           </div>\n                </body>\n            );\n            \n            \n            \n            \n        }\n    }\n}\n\nexport default MainContent;","import React, { Component } from 'react';\n\n\nimport {\n    Link\n}from 'react-router-dom';\n\nimport Header from '../headerComponent/header.js';\n\nclass DateList extends Component {\n    render() {\n        return(\n           \n            \n            \n            <div>\n            \n            \n            <ul>\n            <li>20.10.2019 - Capri Bar</li>\n            <li>to be announced</li>\n            <li>to be announced</li>\n            </ul>\n            <Link to='/' className=\"link\">X</Link>\n            </div>\n        );\n    }\n}\n\nexport default DateList;\n","import React, { Component } from 'react';\n\n\nimport './App.css';\n\nimport {\n    BrowserRouter as Router,\n    Route,\n    Link\n    \n}from 'react-router-dom';\n\n\nimport citrus1 from './components/main/mainImg/citrus1.png';\n\n//components\nimport Background from './components/background/background.js';\nimport MainContent from './components/main/mainContent.js';\nimport DateList from './components/dates/dateList.js';\n\n\nclass App extends Component {\n  render() {\n    return(\n       \n        <Router>\n        \n        \n         <link href=\"https://fonts.googleapis.com/css?family=Source+Serif+Pro&display=swap\" rel=\"stylesheet\"/>\n        \n        \n    <div className=\"App\">\n        \n         \n            \n            \n      \n        \n           \n        <Route exact path ='/' component={MainContent}/>\n       \n        <Route exact path ='/dates' component={DateList}/>\n        \n        <Route exact path ='/video' component={Background}/>\n       \n \n      \n    </div>\n        \n        </Router>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}